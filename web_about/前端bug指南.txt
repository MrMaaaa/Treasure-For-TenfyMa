http://www.w3help.org/zh-cn/causes/index.html 一些兼容性问题

1.与移动设备交互（browser是一个插件，用来判断设备类型）
if (browser.versions.iPhone || browser.versions.iPad || browser.versions.ios) {
  //ios 这是通过ios一个框架实现，并非原生实现
  function setupWebViewJavascriptBridge(callback) {
	if (window.WebViewJavascriptBridge) {
	  return callback(WebViewJavascriptBridge);
	}
	if (window.WVJBCallbacks) {
	  return window.WVJBCallbacks.push(callback);
	}
	window.WVJBCallbacks = [callback];
	var WVJBIframe = document.createElement('iframe');
	WVJBIframe.style.display = 'none';
	WVJBIframe.src = 'wvjbscheme://__BRIDGE_LOADED__';
	document.documentElement.appendChild(WVJBIframe);
	setTimeout(function() {
	  document.documentElement.removeChild(WVJBIframe)
	}, 0)
  }
  setupWebViewJavascriptBridge(function(bridge) {
	bridge.callHandler('iosIsLogin', bridgeData, function(response) {
	});
  });
} else if (browser.versions.android) {
  //android
  var data = JSON.stringify(bridgeData);
  android.androidIsLogin(data);
}

ios中bridge.callHandler函数中第一个参数为调用的函数，第二个参数为函数的参数，第三个参数为函数的返回值，ios返回值可以为map对象，可直接使用key.value调用，无需JSON.parse转化
android中的用法与js函数类似

2. 清除ios设备/移动safari浏览器点击阴影效果：  -webkit-tap-highlight-color: rgba(0,0,0,0);

3. 移动端解决点击后300ms延迟：fastclick或使用jquery的touchend事件
$('input').on('touchend', function() {
	$(this).focus(); //模拟点击获取焦点
})

4. 文本描边：text-stroke（注意兼容性不如text-shadow）配合text-fill-color使用
一个渐变文本描边的样式
{
	-webkit-text-stroke: 6px #f00;
	-webkit-text-fill-color: #fff;
	font-size: 30px;
	background: linear-gradient(-86deg, #EEF85B 5%, #7AEC8D 53%, #09E5C3 91%);
	-webkit-background-clip: text;
	-webkit-text-fill-color: #fff;
	-webkit-text-stroke: 6px transparent;
}

5. js查询css属性是否可用CSS.supports('display', 'flex')
   css中查询：@supports (可选：not) (display: flex) and/or (display: box) {}
   兼容性：不支持IE、UC
   
6. background-repeat新属性：round和space（类似于repeat-x，round不会超出宽度，space自动控制图片间距以适应容器宽度）

7. 防止fixed定位元素错位：加上transform: translateZ(0)或者给fixed元素子元素设置position: absolute;

8. 给position: fixed作优化效果：transform: translateZ(0); 或者 transform: translate3d(0,0,0);
9. 阻止ios设备弹簧效果：
	body {  
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}
   注意：该方法会阻止整个body页面滚动，因此滚动条无法正常滚动，适合作为移动设备内嵌活动页面（红包）等
   
10. 获取dom元素的兼容性写法
function getStyle(elem, property) {
	// ie通过currentStyle来获取元素的样式，其他浏览器通过getComputedStyle来获取
	return document.defaultView.getComputedStyle ? document.defaultView.getComputedStyle(elem, false)[property] : elem.currentStyle[property];
}

11. event.stopImmediatePropagation()阻止该元素的其他事件监听与冒泡

12. jquery中使用end()方法来返回到$(this),如$(this).parent().end()就回到了$(this)这个元素而不是其父元素

13. pointer-events:none; 禁用点击事件 如果要取消a标签的键盘响应事件（如tab键可以切换到该元素）可以remove掉a标签的href属性

14. div:first-of-type:last-of-type === div:only-child 设置了当子元素只有一个的时候的样式
	div:not(:last-of-type):first-of-type 当有多个子元素时，选中第一个；只有一个子元素时该css不生效（但是最后一个子元素无法被应用样式）
	div:not(:only-child) 效果同上，但是最后一个子元素可以被应用样式
	div:not(:only-child):last-of-type 有多个子元素时给最后一个子元素应用样式
	
15. vue中通过router传递params必须使用name代替path

16. 移动端隐藏滚动条
	::-webkit-scrollbar
	{
		height: 0;
		width: 0;
	}
	否则整个元素会偏小（为了给滚动条留出空间，并且在不显示滚动条时该空间为透明）
17. 如果需要在flex布局中实现文字超出隐藏的效果，并且不挤占其他元素。（如A、B两元素，A为占位元素，固定宽度，B为自适应宽度，文字需要超出隐藏，则可做如下设置
A: flex-shrink: 0;
B: width: 1px; flex-grow: 1;
注：如果B的width超出了页面高度则会破坏布局，因此设为1px避免这种情况（可能低版本ios或安卓存在bug导致元素宽度为1px）

18. 如果需要对父页面中引入的子组件添加点击事件，使用@click.native

19. 在浏览器中输入【data:text/html, <html contenteditable>】会打开一个可编辑的页面

20. jQuery进行dom操作时，首先$elem.detach()，然后进行操作，最后$elem.appendTo($parentElem);
detach会移除元素及其所有节点，但保留所有的事件、匹配的元素、附加的数据。因此可以恢复元素。

21. 获取iframe内部元素（同源）
iframe.onload = () => {
// 这里如果使用iframe可能会导致无法获取到元素
  document.getElementById("iframe").contentWindow.document.getElementById('now_submit').style.visibility = 'hidden';
}

22. iframe会在src为空或者任意值时加载一次，如果动态修改src地址，会加载两次，因此需要动态创建iframe然后append到body中

23. table-layout: fixed 单元格等宽

24. ios下需要给某些元素添加cursor: pointer;样式来响应点击事件

25. 部分android设备animation无效的原因：linear等动画函数写在第一位而不是动画名字在第一位
例子：animation: linear m-loading-rotating 1.1s infinite;

26. 匹配中文字符的正则表达式： [\u4e00-\u9fa5]

27. touch-action: manipulation; 这个样式会禁用双击缩放的功能，同时也取消了click事件的300ms延迟问题（PS：如果存在<meta name="viewport" content="width=device-width">标签会自动取消300ms的延迟）

28. Object.prototype.toString.call(argument).slice(8, -1).toLowerCase()
以小写形式返回参数的类型，能识别出null,undefined,array等object类型，但NaN返回number类型

29. /* 防止横屏时的文字缩放 */
    -webkit-text-size-adjust: 100%;
	
30. 
初始化input样式
input[type=text], button, select, textarea
{
	-webkit-appearance: none;
	-moz-appearance: none;
	border-radius: 0px;
}

31. 移动端meta
<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
<meta name="apple-mobile-web-app-capable" content="yes" /><!-- 删除苹果默认的工具栏和菜单栏 -->
<meta name="apple-mobile-web-app-status-bar-style" content="black" /><!-- 设置苹果工具栏颜色 -->
<meta name="format-detection" content="telphone=no, email=no" /><!-- 忽略页面中的数字识别为电话，忽略email识别 -->
<!-- 启用360浏览器的极速模式(webkit) -->
<meta name="renderer" content="webkit">
<!-- 避免IE使用兼容模式 -->
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->
<meta name="HandheldFriendly" content="true">
<!-- 微软的老式浏览器 -->
<meta name="MobileOptimized" content="320">
<!-- uc强制竖屏 -->
<meta name="screen-orientation" content="portrait">
<!-- QQ强制竖屏 -->
<meta name="x5-orientation" content="portrait">
<!-- UC强制全屏 -->
<meta name="full-screen" content="yes">
<!-- QQ强制全屏 -->
<meta name="x5-fullscreen" content="true">
<!-- UC应用模式 -->
<meta name="browsermode" content="application">
<!-- QQ应用模式 -->
<meta name="x5-page-mode" content="app">
<!-- windows phone 点击无高光 -->
<meta name="msapplication-tap-highlight" content="no">

32. 如果npm安装出现【operation not premmited, unlink】的错误，使用npm install --no-optional的方式即可

33. navigator.standalone == true表示通过safari的 添加到主屏幕 功能创建的桌面图标进入的页面，其他情况均为false或者undefined

34. 判断移动端浏览器横竖屏：
	window.addEventListener('onorientationchange' in window ? 'orientationchange' : 'resize', function() {
		if (window.orientation == 180 || window.orientation == 0) {
		  // 竖屏
		} else if (window.orientation == 90 || window.orientation == -90) {
		  // 横屏
		}
	}, false);

35. 使用CSP来阻止XSS攻击 <meta http-equiv="Content-Security-Policy" content="script-src 'self'; object-src 'none'; style-src cdn.example.org third-party.org; child-src https:"> 参考：http://www.ruanyifeng.com/blog/2016/09/csp.html

36. 适配ipx <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover"> viewport-fit=cover
	body {  
    padding: 
        constant(safe-area-inset-top) 
        constant(safe-area-inset-right) 
        constant(safe-area-inset-bottom) 
        constant(safe-area-inset-left);  
	}
	横屏：
	safe-area-inset-top = 0  
	safe-area-inset-right = 44px  
	safe-area-inset-bottom = 21px  
	safe-area-inset-left = 44px
	竖屏：
	safe-area-inset-top = 0
	safe-area-inset-right = 0
	safe-area-inset-bottom = 0
	safe-area-inset-left = 0
	
37. 解决transform导致的模糊 transform: translateZ(0);
	注意：使用这个属性时会在新的层进行渲染，会导致其他absolute/fixed但未使用transform: translateZ(0)设置的元素被遮挡，无法通过z-index进行修正，须在每个元素独立设置transform: translateZ(0)
	
38. vue-cli中设置相对路径
	1) 设置config/index.js
	// 打包js引用目录
	build: {
		assetsPublicPath: './'
	}
	2) 设置build/utils.js
	// 图片引用目录
	return ExtractTextPlugin.extract({
        publicPath: '../../'
      })
	3) 如果使用了vue-router并且mode为history需设置base为具体路径（不包括index.html）
	
39. document.documentMode 获取ie浏览器版本号(其他浏览器为undefined)

40. 在vue项目中的main.js页面中声明所有页面都可set/get的变量:在new Vue时传入data函数来创建变量,在其他的vue页面使用this.$root来获取对应的变量名(注意不能使用vue.prototype来创建,因为每个vue页面都会存在一个独立的变量,这将导致其他页面的修改操作不会影响到其他页面,因此最好作为一些通用组件的入口如$alert/$dialog/$loading)

41. user-select:none;会取消长按的(全选/复制/粘贴)的提示,但是在ios给input设置此样式会导致input/textarea能够拉起键盘但无法输入

42. 如果父元素使用transform(2d偏移),子元素使用绝对定位会导致出现1px左右的偏差,需给父元素加上translateZ或者translate3d

43. 解决ios横屏字体变大的问题：-webkit-text-size-adjust: 100%（不用none为了避免影响pc端）

44. 判断页面是否可见：document.hidden || document.webkitHidden

45. 跳转到APP：universal link或者url scheme

46. 一个算法，求所有排列可能
	const anagrams = str => {
	  if (str.length <= 2) return str.length === 2 ? [str, str[1] + str[0]] : [str];
	  return str.split('').reduce((acc, letter, i) =>
		acc.concat(anagrams(str.slice(0, i) + str.slice(i + 1)).map(val => letter + val)), []);
	};
	// anagrams('abc') -> ['abc','acb','bac','bca','cab','cba']
	
47. 获取滚动位置
	const getScrollPos = (el = window) =>
	  ({x: (el.pageXOffset !== undefined) ? el.pageXOffset : el.scrollLeft,
		y: (el.pageYOffset !== undefined) ? el.pageYOffset : el.scrollTop});

	// getScrollPos() -> {x: 0, y: 200}
	
48. 颜色rgb转16进制
	const rgbToHex = (r, g, b) => ((r << 16) + (g << 8) + b).toString(16).padStart(6, '0');
	
	// rgbToHex(255, 165, 1) -> 'ffa501'

49. 微信小程序如果涉及到图片验证码，如果图片验证码保存在session中，但session一直为空，参考以下代码（先下载然后设置图片的src为返回的临时地址）：
	wx.downloadFile({
		url: captcha,
		success: (res) => {
			this.setData({
				codeImage: res.tempFilePath
			});
		},
		fail: (err) => {
			wx.showToast({
				icon: 'none',
				title: '获取验证码失败，请重试',
			});
		}
	});

50. 支付宝/微信小程序组件（Component）实现动画效果（Animation）时，如果实现效果和组件本身显隐有关，需预先将对应view的样式修改为使用了小程序自带的Animation方法实现的动画的隐藏状态的样式。
	例：制作弹窗组件，对其显示与隐藏增加动画，动画函数如下（省略创建动画相关代码）：
	隐藏动画：
		this.animationMask.opacity(0).step();
    this.animationContainer.translateY('100%').step();
	显示动画：
		this.animationMask.opacity(1).step();
    this.animationContainer.translateY(0).step();
	需要将该组件的样式的对应view修改为其隐藏动画方法对应的样式（opacity: 0;与translateY: 100%;）

51. 小程序组件中引用组件时应放在view中，在text可能导致无法显示的问题